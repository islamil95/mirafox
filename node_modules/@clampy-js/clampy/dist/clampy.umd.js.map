{"version":3,"file":"clampy.umd.js","sources":["../src/clampy.ts"],"sourcesContent":["export interface IClampOptions {\n  clamp?: string | \"auto\"\n  truncationChar?: string\n  truncationHTML?: string\n  splitOnChars?: string[]\n}\n\nexport interface IClampResponse {\n  original: string\n  clamped: string\n}\n\nexport class ClampOptions implements IClampOptions {\n  clamp?: string | \"auto\"\n  truncationChar?: string\n  truncationHTML?: string\n  splitOnChars?: string[]\n\n  constructor(\n    clamp?: string,\n    truncationChar?: string,\n    truncationHTML?: string,\n    splitOnChars?: string[]\n  ) {\n    this.clamp = clamp || \"auto\"\n    this.truncationChar = truncationChar || \"…\"\n    this.truncationHTML = truncationHTML\n    this.splitOnChars = splitOnChars || [\".\", \"-\", \"–\", \"—\", \" \"]\n  }\n}\n\nexport class ClampResponse implements IClampResponse {\n  original: string\n  clamped: string\n\n  constructor(original: string, clamped: string) {\n    this.original = original\n    this.clamped = clamped\n  }\n}\n\n/**\n * Clamps (ie. cuts off) an HTML element's content by adding ellipsis to it if the content inside is too long.\n *\n * @export\n * @param {HTMLElement} element The HTMLElement that should be clamped.\n * @param {ClampOptions} [options] The Clamp options\n * @returns {ClampResponse} The Clamp response\n */\nexport function clamp(element: HTMLElement, options?: ClampOptions): ClampResponse {\n  const win = window\n\n  if (!options) {\n    options = {\n      clamp: \"auto\",\n      truncationChar: \"…\",\n      splitOnChars: [\".\", \"-\", \"–\", \"—\", \" \"]\n    }\n  }\n\n  const opt = {\n    clamp: options.clamp || \"auto\",\n    splitOnChars: options.splitOnChars || [\".\", \"-\", \"–\", \"—\", \" \"], // Split on sentences (periods), hypens, en-dashes, em-dashes, and words (spaces).\n    truncationChar: options.truncationChar || \"…\",\n    truncationHTML: options.truncationHTML\n  }\n\n  let splitOnChars: string[] = opt.splitOnChars.slice(0)\n  let splitChar: string = splitOnChars[0]\n  let chunks: any\n  let lastChunk: any\n  const sty = element.style\n  const originalText = element.innerHTML\n  let clampValue = opt.clamp\n  const isCSSValue =\n    clampValue.indexOf && (clampValue.indexOf(\"px\") > -1 || clampValue.indexOf(\"em\") > -1)\n  let truncationHTMLContainer: any\n\n  if (opt.truncationHTML) {\n    truncationHTMLContainer = document.createElement(\"span\")\n    truncationHTMLContainer.innerHTML = opt.truncationHTML\n  }\n\n  // UTILITY FUNCTIONS __________________________________________________________\n  /**\n   * Return the current style for an element.\n   * @param {HTMLElement} elem The element to compute.\n   * @param {string} prop The style property.\n   * @returns {number}\n   */\n  function computeStyle(elem: HTMLElement, prop: string) {\n    return win.getComputedStyle(elem).getPropertyValue(prop)\n  }\n\n  /**\n   * Returns the maximum number of lines of text that should be rendered based\n   * on the current height of the element and the line-height of the text.\n   */\n  function getMaxLines(height?: number) {\n    const availHeight = height || element.clientHeight\n    const lineHeight = getLineHeight(element)\n\n    return Math.max(Math.floor(availHeight / lineHeight), 0)\n  }\n\n  /**\n   * Returns the maximum height a given element should have based on the line-\n   * height of the text and the given clamp value.\n   */\n  function getMaxHeight(clmp: number) {\n    const lineHeight = getLineHeight(element)\n    return lineHeight * clmp\n  }\n\n  /**\n   * Returns the line-height of an element as an integer.\n   */\n  function getLineHeight(elem: HTMLElement): number {\n    let lh: any = computeStyle(elem, \"line-height\")\n    if (lh === \"normal\") {\n      // Normal line heights vary from browser to browser. The spec recommends\n      // a value between 1.0 and 1.2 of the font size. Using 1.1 to split the diff.\n      lh = parseFloat(parseFloat(computeStyle(elem, \"font-size\")).toFixed(0)) * 1.1\n    }\n    return parseFloat(parseFloat(lh).toFixed(0))\n  }\n\n  /**\n   * Returns the height of an element as an integer (max of scroll/offset/client).\n   * Note: inline elements return 0 for scrollHeight and clientHeight\n   */\n  function getElemHeight(elem: HTMLElement): number {\n    // The '- 4' is a hack to deal with the element height when the browser(especially IE) zoom level is not 100%.\n    // It also doesn't impact clamping when the browser zoom level is 100%.\n    return Math.max(elem.scrollHeight, elem.clientHeight) - 4\n  }\n\n  /**\n   * Gets an element's last child. That may be another node or a node's contents.\n   */\n  function getLastChild(elem: any): any {\n    if (!elem.lastChild) {\n      return\n    }\n    // Current element has children, need to go deeper and get last child as a text node\n    if (elem.lastChild.children && elem.lastChild.children.length > 0) {\n      return getLastChild(Array.prototype.slice.call(elem.children).pop())\n    }\n    // This is the absolute last child, a text node, but something's wrong with it. Remove it and keep trying\n    else if (\n      !elem.lastChild ||\n      !elem.lastChild.nodeValue ||\n      elem.lastChild.nodeValue === \"\" ||\n      elem.lastChild.nodeValue === opt.truncationChar\n    ) {\n      if (!elem.lastChild.nodeValue) {\n        // Check for void/empty element (such as <br> tag) or if it's the ellipsis and remove it.\n        if (\n          (elem.lastChild.firstChild === null ||\n            elem.lastChild.firstChild.nodeValue === opt.truncationChar) &&\n          elem.lastChild.parentNode\n        ) {\n          elem.lastChild.parentNode.removeChild(elem.lastChild)\n\n          // Check if the element has no more children and remove it if it's the case.\n          // This can happen for instance with lists (i.e. <ul> and <ol>) with no items.\n          if ((!elem.children || elem.children.length === 0) && elem.parentNode) {\n            elem.parentNode.removeChild(elem)\n            return getLastChild(element)\n          }\n        }\n\n        // Check if it's a text node\n        if (elem.lastChild.nodeType === 3) {\n          return elem.lastChild\n        } else {\n          return getLastChild(elem.lastChild)\n        }\n      }\n      if (\n        elem.lastChild &&\n        elem.lastChild.parentNode &&\n        elem.lastChild.nodeValue === opt.truncationChar\n      ) {\n        elem.lastChild.parentNode.removeChild(elem.lastChild)\n      } else {\n        return elem\n      }\n      return getLastChild(element)\n    }\n    // This is the last child we want, return it\n    else {\n      return elem.lastChild\n    }\n  }\n\n  /**\n   * Apply the ellipsis to the element\n   * @param elem the element to apply the ellipsis on\n   * @param str The string that will be set to the element\n   */\n  function applyEllipsis(elem: HTMLElement, str: string) {\n    elem.nodeValue = str + opt.truncationChar\n  }\n\n  /**\n   * Removes one character at a time from the text until its width or\n   * height is beneath the passed-in max param.\n   */\n  function truncate(target: HTMLElement, maxHeight: number): any {\n    /**\n     * Resets global variables.\n     */\n    function reset() {\n      splitOnChars = opt.splitOnChars.slice(0)\n      splitChar = splitOnChars[0]\n      chunks = null\n      lastChunk = null\n    }\n\n    if (!target || !maxHeight || !target.nodeValue) {\n      return\n    }\n\n    const nodeValue = target.nodeValue.replace(opt.truncationChar, \"\")\n\n    // Grab the next chunks\n    if (!chunks) {\n      // If there are more characters to try, grab the next one\n      if (splitOnChars.length > 0) {\n        splitChar = splitOnChars.shift()!\n      } else {\n        // No characters to chunk by. Go character-by-character\n        splitChar = \"\"\n      }\n\n      chunks = nodeValue.split(splitChar)\n    }\n\n    // If there are chunks left to remove, remove the last one and see if\n    // the nodeValue fits.\n    if (chunks.length > 1) {\n      lastChunk = chunks.pop()\n      applyEllipsis(target, chunks.join(splitChar))\n    } else {\n      // No more chunks can be removed using this character\n      chunks = null\n    }\n\n    // Insert the custom HTML before the truncation character\n    if (truncationHTMLContainer) {\n      target.nodeValue = target.nodeValue.replace(opt.truncationChar, \"\")\n      element.innerHTML =\n        target.nodeValue + \" \" + truncationHTMLContainer.innerHTML + opt.truncationChar\n    }\n\n    // Search produced valid chunks\n    if (chunks) {\n      // It fits\n      if (element.clientHeight <= maxHeight) {\n        // There's still more characters to try splitting on, not quite done yet\n        if (splitOnChars.length >= 0 && splitChar !== \"\") {\n          applyEllipsis(target, chunks.join(splitChar) + splitChar + lastChunk)\n          chunks = null\n        } else {\n          // Finished!\n          return element.innerHTML\n        }\n      }\n    } else {\n      // No valid chunks produced\n      // No valid chunks even when splitting by letter, time to move\n      // on to the next node\n      if (splitChar === \"\") {\n        applyEllipsis(target, \"\")\n        target = getLastChild(element)\n\n        reset()\n      }\n    }\n\n    return truncate(target, maxHeight)\n  }\n\n  // CONSTRUCTOR ________________________________________________________________\n  if (clampValue === \"auto\") {\n    clampValue = getMaxLines().toString()\n  } else if (isCSSValue) {\n    clampValue = getMaxLines(parseInt(clampValue, 10)).toString()\n  }\n\n  let clampedText\n  const height = getMaxHeight(Number(clampValue))\n  if (height < getElemHeight(element)) {\n    clampedText = truncate(getLastChild(element), height)\n  }\n\n  return new ClampResponse(originalText, clampedText)\n}\n"],"names":[],"mappings":"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"}